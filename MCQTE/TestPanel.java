
package convert;

import java.awt.Dimension;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.*;

public class TestPanel extends javax.swing.JPanel {

    
    int corrAns;
    int marks = 0; //add function to implement different marking schemes
    ArrayList<Question> testQuestionList;
    int index = 0;
    
    StudentLogin sl;
    JFrame wind;
    
    
    private void getTest(){
        //assuming only one table TEST in the DB
        Connection con = null;
        Statement st = null;
        ResultSet rs = null;
        
        String url = "jdbc:derby:testdb";
        
        try {
            
            //System.setProperty("derby.system.home", 
            //        "home/mDbFolder");
           
            
            DriverManager.registerDriver( new org.apache.derby.jdbc.EmbeddedDriver());
            
            con = DriverManager.getConnection(url);
            st = con.createStatement();
            rs = st.executeQuery("SELECT * FROM USER12.TEST");
        
            while(rs.next()){
                Question newQ = new Question();
                newQ.setId(rs.getInt(1));
                newQ.setQ(rs.getString(2));
                newQ.setOptA(rs.getString(3));
                newQ.setOptB(rs.getString(4));
                newQ.setOptC(rs.getString(5));
                newQ.setOptD(rs.getString(6));
                newQ.setAns(rs.getInt(7));
                testQuestionList.add(newQ);
            }
            
            
            DriverManager.getConnection("jdbc:derby:;shutdown=true");

        } catch (SQLException ex) {
            
            Logger lgr = Logger.getLogger(TestPanel.class.getName());

            if (((ex.getErrorCode() == 50000)
                    && ("XJ015".equals(ex.getSQLState())))) {

                lgr.log(Level.INFO, "Derby shut down normally", ex);

            } else {

                lgr.log(Level.SEVERE, ex.getMessage(), ex);
            }

        } finally {

            try {
                //if (rs != null) {
                //    rs.close();
                //}
                if (st != null) {
                    st.close();
                }
                if (con != null) {
                    con.close();
                }

            } catch (SQLException ex) {
                Logger lgr = Logger.getLogger(TestPanel.class.getName());
                lgr.log(Level.WARNING, ex.getMessage(), ex);
            }
        }
        
        
    }
    
    private void loadFirstQuestion(){
        if(index < testQuestionList.size()){
            qPane.setText("Q" + testQuestionList.get(index).getId() + testQuestionList.get(index).getQ());
            optA.setText(testQuestionList.get(index).getOptA());
            optB.setText(testQuestionList.get(index).getOptB());
            optC.setText(testQuestionList.get(index).getOptC());
            optD.setText(testQuestionList.get(index).getOptD());
            corrAns = testQuestionList.get(index).getAns();
            index += 1;
        }
    }
    
    public TestPanel(StudentLogin sl,JFrame wind) {
        this.sl = sl;
        this.wind = wind;
        testQuestionList = new ArrayList<>(0);
        initComponents();
        //qPane.setText("Hello World!");
        
        float size = 24;
        qPane.setFont(qPane.getFont().deriveFont(size));
        optA.setFont(qPane.getFont().deriveFont(size));
        optB.setFont(qPane.getFont().deriveFont(size));
        optC.setFont(qPane.getFont().deriveFont(size));
        optD.setFont(qPane.getFont().deriveFont(size));
        size = 36;
        submitButton.setFont(qPane.getFont().deriveFont(size));
        
        
        //qPane.setSize(wind.getWidth(), 10);
        getTest();
        loadFirstQuestion();
        //setDefaultOperationOnClose(EXIT_ON_CLOSE);
        //panel changes this.setDefaultCloseOperation(EXIT_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        qPane = new javax.swing.JTextPane();
        optA = new javax.swing.JRadioButton();
        optC = new javax.swing.JRadioButton();
        optB = new javax.swing.JRadioButton();
        optD = new javax.swing.JRadioButton();
        submitButton = new javax.swing.JButton();

        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        qPane.setPreferredSize(new Dimension (wind.getWidth(), wind.getHeight()/4));
        qPane.setEditable(false);
        jScrollPane1.setViewportView(qPane);

        buttonGroup1.add(optA);
        optA.setText("OptionA");

        buttonGroup1.add(optC);
        optC.setText("OptionC");

        buttonGroup1.add(optB);
        optB.setText("OptionB");
        

        buttonGroup1.add(optD);
        optD.setText("OptionD");
        
        submitButton.setText("Submit and Continue");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(optD)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submitButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(optC)
                            .addComponent(optB)
                            .addComponent(optA)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, wind.getWidth() - 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 28, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(optA)
                        .addGap(18, 18, 18)
                        .addComponent(optB)
                        .addGap(18, 18, 18)
                        .addComponent(optC)
                        .addGap(18, 18, 18)
                        .addComponent(optD)
                        .addContainerGap(40, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(submitButton)
                        .addContainerGap())))
        );

        //pack();
    }// </editor-fold>                        

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        //if(getButton().getSelected() == true)
        int i = 0;
        if(optA.isSelected() == true){
            i = 1;
        }
        if(optB.isSelected() == true){
            i = 2;
        }
        if(optC.isSelected() == true){
            i = 3;
        }
        if(optD.isSelected() == true){
            i = 4;
        }
        
        buttonGroup1.clearSelection();
        
        if(i == corrAns){
            marks += 1;
        }
        if(index < testQuestionList.size()){
            qPane.setText("Q" + testQuestionList.get(index).getId() + testQuestionList.get(index).getQ());
            optA.setText(testQuestionList.get(index).getOptA());
            optB.setText(testQuestionList.get(index).getOptB());
            optC.setText(testQuestionList.get(index).getOptC());
            optD.setText(testQuestionList.get(index).getOptD());
            corrAns = testQuestionList.get(index).getAns();
            index += 1;
        }
        else{
            //trigger end panel
            
            //JFrame temp = new JFrame();
            //temp.setVisible(true);
            //temp.setSize(getSize());
            EndPanel endScreen = new EndPanel(wind);
            endScreen.setMarks(marks, index);
            //endScreen.setVisible(true);
            wind.add(endScreen);
            try {
                sl.updateDb(marks);
            } catch (SQLException ex) {
                Logger.getLogger(TestPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            setVisible(false);
            this.setEnabled(false);
        }
        
        
    }                                            
   /**
     * @param args the command line arguments
     */
//    
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Test.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new Test().setVisible(true);
//            }
//        });
//    }
//    

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButton optA;
    private javax.swing.JRadioButton optB;
    private javax.swing.JRadioButton optC;
    private javax.swing.JRadioButton optD;
    private javax.swing.JTextPane qPane;
    private javax.swing.JButton submitButton;
    // End of variables declaration                   
}
